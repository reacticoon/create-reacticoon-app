const { injectWebpackPlugin } = require("../../utils/rewired");

function webpackPluginsConfigurator(config, env, options) {
  if (env.isTesting) {
    return config;
  }

  //
  // add our webpack plugins
  //

  // TODO: concat with Reacticoon user plugins config
  const CircularDependencyPlugin = env.reacticoonPaths.requireReacticoon(
    "circular-dependency-plugin"
  );

  const CompressionPlugin = require("compression-webpack-plugin"); //gzip
  const BrotliPlugin = require("brotli-webpack-plugin"); //brotli
  const BundleAnalyzerPlugin = require("webpack-bundle-analyzer")
    .BundleAnalyzerPlugin;

  const featureWebpackPlugin = require("./webpack-plugins/feature.webpackPlugin");

  const webpackPlugins = [
    featureWebpackPlugin(env),

    //
    // Webpack - CircularDependancy plugin
    // https://github.com/aackerman/circular-dependency-plugin
    //
    new CircularDependencyPlugin({
      exclude: /node_modules/,
      // allow import cycles that include an asyncronous import,
      // e.g. via import(/* webpackMode: "weak" */ './file.js')
      allowAsyncCycles: true,
      // set to true to add errors to webpack instead of warnings
      failOnError: false,
      // `onDetected` is called for each module that is cyclical
      onDetected(props = {}) {
        if (!props) {
          return;
        }
        const { module: webpackModuleRecord, paths, compilation } = props;
        let errorMsg = "Circular dependency detected:\n";

        paths.forEach(path => {
          errorMsg += "-> " + path + "\n";
        });

        // `paths` will be an Array of the relative module paths that make up the cycle
        // `module` will be the module record generated by webpack that caused the cycle
        compilation.warnings.push(new Error(errorMsg));
      }
    }),

    //
    // https://webpack.js.org/plugins/compression-webpack-plugin/
    // Prepare compressed versions of assets to serve them with Content-Encoding.
    //
    env.isEnvProduction &&
      new CompressionPlugin({
        //gzip plugin
        filename: "[path].gz[query]",
        algorithm: "gzip",
        test: /\.(js|css|html|svg)$/,
        threshold: 8192,
        minRatio: 0.8
      }),

    //
    // https://www.npmjs.com/package/brotli-webpack-plugin
    // This plugin compresses assets with Brotli compression algorithm using zlib, iltorb or brotli.js
    // libraries for serving it with ngx_brotli or such.
    //
    env.isEnvProduction &&
      new BrotliPlugin({
        //brotli plugin
        asset: "[path].br[query]",
        test: /\.(js|css|html|svg)$/,
        threshold: 10240,
        minRatio: 0.8
      }),

    //
    // https://github.com/webpack-contrib/webpack-bundle-analyzer
    // Webpack plugin and CLI utility that represents bundle content as convenient interactive zoomable treemap
    //
    env.isEnvProduction && new BundleAnalyzerPlugin()

    //
    //
    //
  ].filter(Boolean);

  webpackPlugins.forEach(plugin => {
    config = injectWebpackPlugin(plugin, config);
  });
}

module.exports = webpackPluginsConfigurator;
